const fetch = require('node-fetch');

// Function to fetch the content of a URL
async function fetchURL(url) {
  try {
    const response = await fetch(url);
    const data = await response.json();
    return data;
  } catch (error) {
    console.error(`Error fetching URL: ${url}`, error);
    throw error;
  }
}

// Function to explore a room in the castle
async function exploreRoom(roomURL, visitedRooms, visitedChests, fullChests) {
  // Check if the room has already been visited
  if (visitedRooms.has(roomURL)) {
    console.log(`Room ${roomURL} already visited. Skipping...`);
    return;
  }

  console.log(`Exploring ${roomURL}`);

  // Add the room to the list of visited rooms
  visitedRooms.add(roomURL);

  try {
    // Fetch the room details
    const room = await fetchURL(`https://infinite-castles.azurewebsites.net/${roomURL}`);

    // Create an array to hold promises for fetching chest statuses
    const chestPromises = [];

    // Iterate over the chests in the room
    for (const chestURL of room.chests) {
      // Check if the chest has already been visited
      if (visitedChests.has(chestURL)) {
        console.log(`Chest ${chestURL} already visited. Skipping...`);
        continue;
      }

      console.log(`Checking chest ${chestURL}`);

      // Add the chest to the set of visited chests
      visitedChests.add(chestURL);

      try {
        // Push the promise for fetching chest status into the array
        chestPromises.push(fetchURL(`https://infinite-castles.azurewebsites.net/${chestURL}`));
      } catch (error) {
        console.error(`Error fetching chest status: ${error.message}`);
      }
    }

    // Fetch chest statuses in parallel
    const chestStatuses = await Promise.all(chestPromises);

    // Iterate over the fetched chest statuses
    for (let i = 0; i < room.chests.length; i++) {
      const chestURL = room.chests[i];
      const chest = chestStatuses[i];

      // Check if the chest is not empty
      if (chest.status !== 'This chest is empty :/ Try another one!') {
        // Add the full chest to the array
        fullChests.push(chestURL);
      }
    }

    // Explore the linked rooms
    const explorePromises = room.rooms.map((linkedRoomURL) =>
      exploreRoom(linkedRoomURL, visitedRooms, visitedChests, fullChests)
    );
    await Promise.all(explorePromises);
  } catch (error) {
    console.error(`Error exploring castle: ${error.message}`);
  }
}

async function main() {
  const entryURL = '/castles/1/rooms/entry';
  const visitedRooms = new Set();
  const visitedChests = new Set();
  const fullChests = [];

  console.log(`Exploring ${entryURL}`);

  try {
    // Explore the castle starting from the entry
    await exploreRoom(entryURL, visitedRooms, visitedChests, fullChests);

    // Display the results
    console.log('Number of full chests found:', fullChests.length);
    console.log('Locations of full chests:', fullChests);
  } catch (error) {
    console.error(`An error occurred: ${error.message}`);
  }
}

// Launch the script
main();
